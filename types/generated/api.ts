/* tslint:disable */
/* eslint-disable */
/**
 * DAnime API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiDanimeSearchGet200Response
 */
export interface ApiDanimeSearchGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiDanimeSearchGet200Response
     */
    'resultCd': string;
    /**
     * 
     * @type {string}
     * @memberof ApiDanimeSearchGet200Response
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof ApiDanimeSearchGet200Response
     */
    'selflink': string;
    /**
     * 
     * @type {ApiDanimeSearchGet200ResponseData}
     * @memberof ApiDanimeSearchGet200Response
     */
    'data'?: ApiDanimeSearchGet200ResponseData;
}
/**
 * 
 * @export
 * @interface ApiDanimeSearchGet200ResponseData
 */
export interface ApiDanimeSearchGet200ResponseData {
    /**
     * 
     * @type {number}
     * @memberof ApiDanimeSearchGet200ResponseData
     */
    'maxCount': number;
    /**
     * 
     * @type {number}
     * @memberof ApiDanimeSearchGet200ResponseData
     */
    'count': number;
    /**
     * 
     * @type {Array<Work>}
     * @memberof ApiDanimeSearchGet200ResponseData
     */
    'workList': Array<Work>;
}
/**
 * 
 * @export
 * @interface Work
 */
export interface Work {
    /**
     * 
     * @type {string}
     * @memberof Work
     */
    'workId': string;
    /**
     * 
     * @type {WorkWorkInfo}
     * @memberof Work
     */
    'workInfo': WorkWorkInfo;
}
/**
 * 
 * @export
 * @interface WorkWorkInfo
 */
export interface WorkWorkInfo {
    /**
     * 
     * @type {string}
     * @memberof WorkWorkInfo
     */
    'workTitle': string;
    /**
     * 
     * @type {string}
     * @memberof WorkWorkInfo
     */
    'link': string;
    /**
     * 
     * @type {string}
     * @memberof WorkWorkInfo
     */
    'mainKeyVisualPath': string;
    /**
     * 
     * @type {string}
     * @memberof WorkWorkInfo
     */
    'mainKeyVisualAlt': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof WorkWorkInfo
     */
    'workIcons': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof WorkWorkInfo
     */
    'myListCount': number;
    /**
     * 
     * @type {number}
     * @memberof WorkWorkInfo
     */
    'favoriteCount': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkWorkInfo
     */
    'workTypeList': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof WorkWorkInfo
     */
    'vodType': string;
    /**
     * 
     * @type {string}
     * @memberof WorkWorkInfo
     */
    'ageLimitType': string;
}

/**
 * DanimeApi - axios parameter creator
 * @export
 */
export const DanimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 検索
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDanimeSearchGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDanimeSearchGet', 'id', id)
            const localVarPath = `/api/danime/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DanimeApi - functional programming interface
 * @export
 */
export const DanimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DanimeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 検索
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDanimeSearchGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDanimeSearchGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDanimeSearchGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DanimeApi - factory interface
 * @export
 */
export const DanimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DanimeApiFp(configuration)
    return {
        /**
         * 
         * @summary 検索
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDanimeSearchGet(id: string, options?: any): AxiosPromise<ApiDanimeSearchGet200Response> {
            return localVarFp.apiDanimeSearchGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DanimeApi - object-oriented interface
 * @export
 * @class DanimeApi
 * @extends {BaseAPI}
 */
export class DanimeApi extends BaseAPI {
    /**
     * 
     * @summary 検索
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DanimeApi
     */
    public apiDanimeSearchGet(id: string, options?: AxiosRequestConfig) {
        return DanimeApiFp(this.configuration).apiDanimeSearchGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


